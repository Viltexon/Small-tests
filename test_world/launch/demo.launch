<?xml version="1.0" encoding="UTF-8" ?>
<launch>
 
  <arg name="gui" default="true"/>
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="debug" default="false"/>
  <arg name="world_name" default="$(find test_world)/worlds/test_world.world"/>

  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="debug" value="$(arg debug)" />
    <arg name="world_name" default="$(arg world_name)"/>
  </include>


  <!-- Run the map server -->
  <arg name="map_file" default="$(find test_world)/models/map1/materials/map1.yaml"/>

  <node name="map_server" pkg="map_server" type="map_server" args="$(arg map_file)" />


  <!-- robot -->

  <param name="robot_description" command="$(find xacro)/xacro --inorder '$(find test_world)/urdf/robot1/robot.urdf'" />
  
  <arg name="x" default="10"/>
  <arg name="y" default="0"/>
  <arg name="z" default="1.5"/>
  <arg name="yaw" default="-3"/>

  <node name="my_robot_spawn" pkg="gazebo_ros" type="spawn_model" output="screen"
          args="-urdf -param robot_description -model my_robot -x $(arg x) -y $(arg y) -z $(arg z) -Y $(arg yaw)" />

  <!-- robot2 -->

  <param name="robot_description_2" command="$(find xacro)/xacro --inorder '$(find test_world)/urdf/robot2/robot.urdf'" />
  
  <arg name="x2" default="-8"/>
  <arg name="y2" default="0"/>
  <arg name="z2" default="1.5"/>
  <arg name="yaw2" default="0.5"/>

  <node name="my_robot_spawn2" pkg="gazebo_ros" type="spawn_model" output="screen"
          args="-urdf -param robot_description_2 -model my_robot_2 -x $(arg x2) -y $(arg y2) -z $(arg z2) -Y $(arg yaw2)" />

  <node pkg="test_world" type="mover_c1.py" name="mover_c1" output="screen"/>
  <!-- <node pkg="test_world" type="mover.py" name="mover" output="screen"/> -->
  <!-- <node pkg="test_world" type="mover2.py" name="mover2" output="screen"/> -->

  
  <!-- Start service server that responds with a plan for global path planning -->
  <node pkg="test_world" name="path_plan_server" type="PathServer.py" output="screen"/> 
  <node pkg="test_world" name="path_plan_server2" type="PathServer_c1.py" output="screen"/> 

</launch>
